generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}
model RoutineBase {
  id          Int                  @id @default(autoincrement())
  name        String
  type        String
  days        Int
  fileUrl     String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  reusable    Boolean              @default(false)
  assignments RoutineAssignment[]  @relation("RoutineToAssignment")
}

model RoutineAssignment {
  id             Int           @id @default(autoincrement())
  user           users         @relation(fields: [userId], references: [id])
  userId         Int
  routine        RoutineBase?  @relation("RoutineToAssignment", fields: [routineBaseId], references: [id])
  routineBaseId  Int?
  customFile     String?
  evaluated      Boolean       @default(false)
  selfEvaluated  Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}


model users {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(100)
  email          String    @unique @db.VarChar(100)
  password       String    @db.VarChar(255)
  payment_status String? @default("verde") 
  role           Role      @default(USER)  // rol del usuario, por denpmfecto USER
  weight         Float?    
  height         Float?    
  age            Int?      
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  last_payment   DateTime? 
  payment_expiration DateTime? 
  injury         String?   @db.Text
  payment_amount Float?    
  notes          String?   @db.Text 
  notifications      notifications[]
  routineAssignments RoutineAssignment[]
  evaluationRequests EvaluationRequest[]
}

model notifications {
  id        Int      @id @default(autoincrement())
  type      String?  @default("general")
  message   String   @db.Text
  date      DateTime @default(now())
  read      Boolean  @default(false)
  userId    Int
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EvaluationRequest {
  id         Int       @id @default(autoincrement())
  user       users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  status     String    @default("pendiente") // "pendiente", "aprobada", "finalizada"
  data       Json?                         // Guarda el progreso: [{ ejercicio, peso, reps }]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
